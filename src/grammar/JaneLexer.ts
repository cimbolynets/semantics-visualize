// Generated from ./src/grammar/Jane.g4 by ANTLR 4.9.0-SNAPSHOT

import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";
import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";

import * as Utils from "antlr4ts/misc/Utils";

export class JaneLexer extends Lexer {
  public static readonly Whitespace = 1;
  public static readonly Newline = 2;
  public static readonly Skip = 3;
  public static readonly Lpar = 4;
  public static readonly Rpar = 5;
  public static readonly And = 6;
  public static readonly AssignSymbol = 7;
  public static readonly While = 8;
  public static readonly Do = 9;
  public static readonly Then = 10;
  public static readonly If = 11;
  public static readonly Else = 12;
  public static readonly Mult = 13;
  public static readonly Plus = 14;
  public static readonly Minus = 15;
  public static readonly Not = 16;
  public static readonly Leq = 17;
  public static readonly Eq = 18;
  public static readonly Semicolon = 19;
  public static readonly Id = 20;
  public static readonly Value = 21;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ["DEFAULT_MODE"];

  public static readonly ruleNames: string[] = [
    "Whitespace",
    "Newline",
    "Skip",
    "Lpar",
    "Rpar",
    "And",
    "AssignSymbol",
    "While",
    "Do",
    "Then",
    "If",
    "Else",
    "Mult",
    "Plus",
    "Minus",
    "Not",
    "Leq",
    "Eq",
    "Semicolon",
    "Id",
    "Value",
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    "'skip'",
    "'('",
    "')'",
    "'and'",
    "':='",
    "'while'",
    "'do'",
    "'then'",
    "'if'",
    "'else'",
    "'*'",
    "'+'",
    "'-'",
    "'!'",
    "'<='",
    "'='",
    "';'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    "Whitespace",
    "Newline",
    "Skip",
    "Lpar",
    "Rpar",
    "And",
    "AssignSymbol",
    "While",
    "Do",
    "Then",
    "If",
    "Else",
    "Mult",
    "Plus",
    "Minus",
    "Not",
    "Leq",
    "Eq",
    "Semicolon",
    "Id",
    "Value",
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    JaneLexer._LITERAL_NAMES,
    JaneLexer._SYMBOLIC_NAMES,
    []
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return JaneLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(JaneLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return "Jane.g4";
  }

  // @Override
  public get ruleNames(): string[] {
    return JaneLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return JaneLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return JaneLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return JaneLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\x85\b\x01" +
    "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
    "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
    "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
    "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x06" +
    "\x02/\n\x02\r\x02\x0E\x020\x03\x02\x03\x02\x03\x03\x05\x036\n\x03\x03" +
    "\x03\x03\x03\x06\x03:\n\x03\r\x03\x0E\x03;\x03\x03\x03\x03\x03\x04\x03" +
    "\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03" +
    "\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
    "\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03" +
    "\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03" +
    "\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03" +
    "\x14\x03\x15\x03\x15\x07\x15w\n\x15\f\x15\x0E\x15z\v\x15\x03\x16\x03\x16" +
    "\x07\x16~\n\x16\f\x16\x0E\x16\x81\v\x16\x03\x16\x05\x16\x84\n\x16\x02" +
    "\x02\x02\x17\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r" +
    "\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B" +
    "\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15" +
    ')\x02\x16+\x02\x17\x03\x02\x07\x04\x02\v\v""\x04\x02C\\c|\x05\x022;' +
    "C\\c|\x03\x023;\x03\x022;\x02\x8B\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
    "\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
    "\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
    "\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
    "\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
    "\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
    "\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
    "+\x03\x02\x02\x02\x03.\x03\x02\x02\x02\x059\x03\x02\x02\x02\x07?\x03\x02" +
    "\x02\x02\tD\x03\x02\x02\x02\vF\x03\x02\x02\x02\rH\x03\x02\x02\x02\x0F" +
    "L\x03\x02\x02\x02\x11O\x03\x02\x02\x02\x13U\x03\x02\x02\x02\x15X\x03\x02" +
    "\x02\x02\x17]\x03\x02\x02\x02\x19`\x03\x02\x02\x02\x1Be\x03\x02\x02\x02" +
    "\x1Dg\x03\x02\x02\x02\x1Fi\x03\x02\x02\x02!k\x03\x02\x02\x02#m\x03\x02" +
    "\x02\x02%p\x03\x02\x02\x02'r\x03\x02\x02\x02)t\x03\x02\x02\x02+\x83\x03" +
    "\x02\x02\x02-/\t\x02\x02\x02.-\x03\x02\x02\x02/0\x03\x02\x02\x020.\x03" +
    "\x02\x02\x0201\x03\x02\x02\x0212\x03\x02\x02\x0223\b\x02\x02\x023\x04" +
    "\x03\x02\x02\x0246\x07\x0F\x02\x0254\x03\x02\x02\x0256\x03\x02\x02\x02" +
    "67\x03\x02\x02\x027:\x07\f\x02\x028:\x07\x0F\x02\x0295\x03\x02\x02\x02" +
    "98\x03\x02\x02\x02:;\x03\x02\x02\x02;9\x03\x02\x02\x02;<\x03\x02\x02\x02" +
    "<=\x03\x02\x02\x02=>\b\x03\x02\x02>\x06\x03\x02\x02\x02?@\x07u\x02\x02" +
    "@A\x07m\x02\x02AB\x07k\x02\x02BC\x07r\x02\x02C\b\x03\x02\x02\x02DE\x07" +
    "*\x02\x02E\n\x03\x02\x02\x02FG\x07+\x02\x02G\f\x03\x02\x02\x02HI\x07c" +
    "\x02\x02IJ\x07p\x02\x02JK\x07f\x02\x02K\x0E\x03\x02\x02\x02LM\x07<\x02" +
    "\x02MN\x07?\x02\x02N\x10\x03\x02\x02\x02OP\x07y\x02\x02PQ\x07j\x02\x02" +
    "QR\x07k\x02\x02RS\x07n\x02\x02ST\x07g\x02\x02T\x12\x03\x02\x02\x02UV\x07" +
    "f\x02\x02VW\x07q\x02\x02W\x14\x03\x02\x02\x02XY\x07v\x02\x02YZ\x07j\x02" +
    "\x02Z[\x07g\x02\x02[\\\x07p\x02\x02\\\x16\x03\x02\x02\x02]^\x07k\x02\x02" +
    "^_\x07h\x02\x02_\x18\x03\x02\x02\x02`a\x07g\x02\x02ab\x07n\x02\x02bc\x07" +
    "u\x02\x02cd\x07g\x02\x02d\x1A\x03\x02\x02\x02ef\x07,\x02\x02f\x1C\x03" +
    "\x02\x02\x02gh\x07-\x02\x02h\x1E\x03\x02\x02\x02ij\x07/\x02\x02j \x03" +
    '\x02\x02\x02kl\x07#\x02\x02l"\x03\x02\x02\x02mn\x07>\x02\x02no\x07?\x02' +
    "\x02o$\x03\x02\x02\x02pq\x07?\x02\x02q&\x03\x02\x02\x02rs\x07=\x02\x02" +
    "s(\x03\x02\x02\x02tx\t\x03\x02\x02uw\t\x04\x02\x02vu\x03\x02\x02\x02w" +
    "z\x03\x02\x02\x02xv\x03\x02\x02\x02xy\x03\x02\x02\x02y*\x03\x02\x02\x02" +
    "zx\x03\x02\x02\x02{\x7F\t\x05\x02\x02|~\t\x06\x02\x02}|\x03\x02\x02\x02" +
    "~\x81\x03\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80" +
    "\x84\x03\x02\x02\x02\x81\x7F\x03\x02\x02\x02\x82\x84\t\x06\x02\x02\x83" +
    "{\x03\x02\x02\x02\x83\x82\x03\x02\x02\x02\x84,\x03\x02\x02\x02\n\x020" +
    "59;x\x7F\x83\x03\b\x02\x02";
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!JaneLexer.__ATN) {
      JaneLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(JaneLexer._serializedATN)
      );
    }

    return JaneLexer.__ATN;
  }
}
