// Generated from ./src/grammar/Jane.g4 by ANTLR 4.9.0-SNAPSHOT

import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";
import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";

import * as Utils from "antlr4ts/misc/Utils";

export class JaneLexer extends Lexer {
  public static readonly Whitespace = 1;
  public static readonly Newline = 2;
  public static readonly Skip = 3;
  public static readonly Lpar = 4;
  public static readonly Rpar = 5;
  public static readonly And = 6;
  public static readonly AssignSymbol = 7;
  public static readonly While = 8;
  public static readonly Do = 9;
  public static readonly Then = 10;
  public static readonly If = 11;
  public static readonly Else = 12;
  public static readonly Mult = 13;
  public static readonly Plus = 14;
  public static readonly Minus = 15;
  public static readonly Not = 16;
  public static readonly Leq = 17;
  public static readonly Eq = 18;
  public static readonly Semicolon = 19;
  public static readonly Begin = 20;
  public static readonly End = 21;
  public static readonly Var = 22;
  public static readonly Proc = 23;
  public static readonly Is = 24;
  public static readonly Call = 25;
  public static readonly Colon = 26;
  public static readonly Id = 27;
  public static readonly Value = 28;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ["DEFAULT_MODE"];

  public static readonly ruleNames: string[] = [
    "Whitespace",
    "Newline",
    "Skip",
    "Lpar",
    "Rpar",
    "And",
    "AssignSymbol",
    "While",
    "Do",
    "Then",
    "If",
    "Else",
    "Mult",
    "Plus",
    "Minus",
    "Not",
    "Leq",
    "Eq",
    "Semicolon",
    "Begin",
    "End",
    "Var",
    "Proc",
    "Is",
    "Call",
    "Colon",
    "Id",
    "Value",
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    "'skip'",
    "'('",
    "')'",
    "'and'",
    "':='",
    "'while'",
    "'do'",
    "'then'",
    "'if'",
    "'else'",
    "'*'",
    "'+'",
    "'-'",
    "'!'",
    "'<='",
    "'='",
    "';'",
    "'begin'",
    "'end'",
    "'var'",
    "'proc'",
    "'is'",
    "'call'",
    "','",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    "Whitespace",
    "Newline",
    "Skip",
    "Lpar",
    "Rpar",
    "And",
    "AssignSymbol",
    "While",
    "Do",
    "Then",
    "If",
    "Else",
    "Mult",
    "Plus",
    "Minus",
    "Not",
    "Leq",
    "Eq",
    "Semicolon",
    "Begin",
    "End",
    "Var",
    "Proc",
    "Is",
    "Call",
    "Colon",
    "Id",
    "Value",
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    JaneLexer._LITERAL_NAMES,
    JaneLexer._SYMBOLIC_NAMES,
    []
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return JaneLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(JaneLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return "Jane.g4";
  }

  // @Override
  public get ruleNames(): string[] {
    return JaneLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return JaneLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return JaneLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return JaneLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1E\xB0\b\x01" +
    "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
    "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
    "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
    "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
    "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
    "\x1C\x04\x1D\t\x1D\x03\x02\x06\x02=\n\x02\r\x02\x0E\x02>\x03\x02\x03\x02" +
    "\x03\x03\x05\x03D\n\x03\x03\x03\x03\x03\x06\x03H\n\x03\r\x03\x0E\x03I" +
    "\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05" +
    "\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03" +
    "\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E" +
    "\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12" +
    "\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15" +
    "\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17" +
    "\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A" +
    "\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x07\x1C" +
    "\xA2\n\x1C\f\x1C\x0E\x1C\xA5\v\x1C\x03\x1D\x03\x1D\x07\x1D\xA9\n\x1D\f" +
    "\x1D\x0E\x1D\xAC\v\x1D\x03\x1D\x05\x1D\xAF\n\x1D\x02\x02\x02\x1E\x03\x02" +
    "\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11" +
    "\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10" +
    "\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02" +
    "\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E\x03\x02\x07" +
    '\x04\x02\v\v""\x04\x02C\\c|\x05\x022;C\\c|\x03\x023;\x03\x022;\x02\xB6' +
    "\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
    "\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
    "\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
    "\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
    "\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
    "!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03" +
    "\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02" +
    "\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02" +
    "5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x03<\x03\x02" +
    "\x02\x02\x05G\x03\x02\x02\x02\x07M\x03\x02\x02\x02\tR\x03\x02\x02\x02" +
    "\vT\x03\x02\x02\x02\rV\x03\x02\x02\x02\x0FZ\x03\x02\x02\x02\x11]\x03\x02" +
    "\x02\x02\x13c\x03\x02\x02\x02\x15f\x03\x02\x02\x02\x17k\x03\x02\x02\x02" +
    "\x19n\x03\x02\x02\x02\x1Bs\x03\x02\x02\x02\x1Du\x03\x02\x02\x02\x1Fw\x03" +
    "\x02\x02\x02!y\x03\x02\x02\x02#{\x03\x02\x02\x02%~\x03\x02\x02\x02'\x80" +
    "\x03\x02\x02\x02)\x82\x03\x02\x02\x02+\x88\x03\x02\x02\x02-\x8C\x03\x02" +
    "\x02\x02/\x90\x03\x02\x02\x021\x95\x03\x02\x02\x023\x98\x03\x02\x02\x02" +
    "5\x9D\x03\x02\x02\x027\x9F\x03\x02\x02\x029\xAE\x03\x02\x02\x02;=\t\x02" +
    "\x02\x02<;\x03\x02\x02\x02=>\x03\x02\x02\x02><\x03\x02\x02\x02>?\x03\x02" +
    "\x02\x02?@\x03\x02\x02\x02@A\b\x02\x02\x02A\x04\x03\x02\x02\x02BD\x07" +
    "\x0F\x02\x02CB\x03\x02\x02\x02CD\x03\x02\x02\x02DE\x03\x02\x02\x02EH\x07" +
    "\f\x02\x02FH\x07\x0F\x02\x02GC\x03\x02\x02\x02GF\x03\x02\x02\x02HI\x03" +
    "\x02\x02\x02IG\x03\x02\x02\x02IJ\x03\x02\x02\x02JK\x03\x02\x02\x02KL\b" +
    "\x03\x02\x02L\x06\x03\x02\x02\x02MN\x07u\x02\x02NO\x07m\x02\x02OP\x07" +
    "k\x02\x02PQ\x07r\x02\x02Q\b\x03\x02\x02\x02RS\x07*\x02\x02S\n\x03\x02" +
    "\x02\x02TU\x07+\x02\x02U\f\x03\x02\x02\x02VW\x07c\x02\x02WX\x07p\x02\x02" +
    "XY\x07f\x02\x02Y\x0E\x03\x02\x02\x02Z[\x07<\x02\x02[\\\x07?\x02\x02\\" +
    "\x10\x03\x02\x02\x02]^\x07y\x02\x02^_\x07j\x02\x02_`\x07k\x02\x02`a\x07" +
    "n\x02\x02ab\x07g\x02\x02b\x12\x03\x02\x02\x02cd\x07f\x02\x02de\x07q\x02" +
    "\x02e\x14\x03\x02\x02\x02fg\x07v\x02\x02gh\x07j\x02\x02hi\x07g\x02\x02" +
    "ij\x07p\x02\x02j\x16\x03\x02\x02\x02kl\x07k\x02\x02lm\x07h\x02\x02m\x18" +
    "\x03\x02\x02\x02no\x07g\x02\x02op\x07n\x02\x02pq\x07u\x02\x02qr\x07g\x02" +
    "\x02r\x1A\x03\x02\x02\x02st\x07,\x02\x02t\x1C\x03\x02\x02\x02uv\x07-\x02" +
    "\x02v\x1E\x03\x02\x02\x02wx\x07/\x02\x02x \x03\x02\x02\x02yz\x07#\x02" +
    '\x02z"\x03\x02\x02\x02{|\x07>\x02\x02|}\x07?\x02\x02}$\x03\x02\x02\x02' +
    "~\x7F\x07?\x02\x02\x7F&\x03\x02\x02\x02\x80\x81\x07=\x02\x02\x81(\x03" +
    "\x02\x02\x02\x82\x83\x07d\x02\x02\x83\x84\x07g\x02\x02\x84\x85\x07i\x02" +
    "\x02\x85\x86\x07k\x02\x02\x86\x87\x07p\x02\x02\x87*\x03\x02\x02\x02\x88" +
    "\x89\x07g\x02\x02\x89\x8A\x07p\x02\x02\x8A\x8B\x07f\x02\x02\x8B,\x03\x02" +
    "\x02\x02\x8C\x8D\x07x\x02\x02\x8D\x8E\x07c\x02\x02\x8E\x8F\x07t\x02\x02" +
    "\x8F.\x03\x02\x02\x02\x90\x91\x07r\x02\x02\x91\x92\x07t\x02\x02\x92\x93" +
    "\x07q\x02\x02\x93\x94\x07e\x02\x02\x940\x03\x02\x02\x02\x95\x96\x07k\x02" +
    "\x02\x96\x97\x07u\x02\x02\x972\x03\x02\x02\x02\x98\x99\x07e\x02\x02\x99" +
    "\x9A\x07c\x02\x02\x9A\x9B\x07n\x02\x02\x9B\x9C\x07n\x02\x02\x9C4\x03\x02" +
    "\x02\x02\x9D\x9E\x07.\x02\x02\x9E6\x03\x02\x02\x02\x9F\xA3\t\x03\x02\x02" +
    "\xA0\xA2\t\x04\x02\x02\xA1\xA0\x03\x02\x02\x02\xA2\xA5\x03\x02\x02\x02" +
    "\xA3\xA1\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA48\x03\x02\x02\x02" +
    "\xA5\xA3\x03\x02\x02\x02\xA6\xAA\t\x05\x02\x02\xA7\xA9\t\x06\x02\x02\xA8" +
    "\xA7\x03\x02\x02\x02\xA9\xAC\x03\x02\x02\x02\xAA\xA8\x03\x02\x02\x02\xAA" +
    "\xAB\x03\x02\x02\x02\xAB\xAF\x03\x02\x02\x02\xAC\xAA\x03\x02\x02\x02\xAD" +
    "\xAF\t\x06\x02\x02\xAE\xA6\x03\x02\x02\x02\xAE\xAD\x03\x02\x02\x02\xAF" +
    ":\x03\x02\x02\x02\n\x02>CGI\xA3\xAA\xAE\x03\b\x02\x02";
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!JaneLexer.__ATN) {
      JaneLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(JaneLexer._serializedATN)
      );
    }

    return JaneLexer.__ATN;
  }
}
